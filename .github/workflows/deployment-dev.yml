name: Deploy to production

on: [ workflow_dispatch ]

jobs:
  docker-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 'Get Login to AWS ECR'
        id: ecr-login
        uses: thalesvon/ecr-login@master
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          AWS_DEFAULT_OUTPUT: json
          AWS_REGION: ${{ secrets.AWS_REGION_PROD }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        with:
          args: 'get-login --no-include-email --region ${AWS_REGION}'
      - name: 'Docker Login'
        run: ${{ steps. ecr-login.outputs.login-string }}
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build  Images (Production)
        run: |
          docker build -t ${{ secrets.IMAGE_NAME }} -f deployments/production/Dockerfile .
          docker tag ${{ secrets.IMAGE_NAME }}:latest ${{ secrets.DOCKER_REGISTRY_PROD }}/${{ secrets.IMAGE_NAME }}:latest
          docker push ${{ secrets.DOCKER_REGISTRY_PROD }}/${{ secrets.IMAGE_NAME }}:latest
      - name: Deploy and Migrate
        uses: fifsky/ssh-action@master
        with:
          command: |
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.DOCKER_REGISTRY_PROD }}
            docker pull ${{ secrets.DOCKER_REGISTRY_PROD }}/${{ secrets.IMAGE_NAME }}:latest
            docker service update --with-registry-auth --image ${{ secrets.DOCKER_REGISTRY_PROD }}/${{ secrets.IMAGE_NAME }}:latest ${{ secrets.DOCKER_SERVICE_NAME }}
            docker exec $(docker ps -q -f name=${{ secrets.DOCKER_SERVICE_NAME }}) python manage.py migrate
          host: ${{ secrets.PROD_HOST }}
          args: -tt
          user: ubuntu
          key: ${{ secrets.PROD_PRIVKEY }}
      - name: Set up Python 3.8 Migrate
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
          architecture: 'x64'